[project]
name = "pysay"
description = "Like cowsay but with a python (from Real Python tutorial)"
authors = [
    {name = "Victor Payno", email = "vpayno@users.noreply.github.com"},
]
maintainers = [
    {name = "Victor Payno", email = "vpayno@users.noreply.github.com"},
]
dynamic = ["version"]
requires-python = ">=3.9"
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["pysay", "cli", "terminal"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
]
dependencies = [
    "rich>=13.7.0",
]

[dependency-groups]
dev = [
    "bandit>=1.8.3",
    "isort>=6.0.0",
    "mkdocs>=1.6.1",
    "mypy-extensions>=1.0.0",
    "mypy>=1.15.0",
    "pdoc3>=0.11.5",
    "pylint>=3.3.4",
    "pyright>=1.1.394",
    "pytest-cov>=6.0.0",
    "pytest-datafiles>=3.0.0",
    "pytest-randomly>=3.16.0",
    "pytest>=8.3.4",
    "ruff>=0.9.6",
    "poethepoet>=0.32.2",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"
version-file = "_version.py"

[project.urls]
"Homepage" = "https://github.com/vpayno/pysay"
"Bug Tracker" = "https://github.com/vpayno/pysay/issues"
"Repository" = "https://github.com/vpayno/pysay.git"
"Changelog" = "https://github.com/vpayno/pysay/releases"
"Documentation" = "https://github.com/vpayno/pysay/blob/main/README.md"

[project.scripts]
pysay = "pysay.main:main"

[tool.uv]
package = true
preview = false

[tool.pyright]
include = ["src", "tests"]

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
# select = []
# ignore = []
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.mypy]
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality =true
warn_return_any = true

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
skip = [".gitignore", ".dockerignore"]
src_paths = ["src", "tests"]
atomic = true
ensure_newline_before_comments = true
multi_line_output = 3
wrap_length = 10
line_length = 11

[tool.poe.tasks]
main = "python -m pysay 'Hello UV!'"
module = "pysay:main 'Hello UV!'"

clean_docs = "rm -rf html mkdocs pysay.html pysay.md pysay.txt"
clean_pycache = "find . -type f -name '*.py[co]' -delete -print -o -type d -name __pycache__ -delete -print"
clean_build = "rm -rf dist"
clean = "for c in clean_docs clean_pycache clean_build; do uv run ${c}; done"

format = "ruff format"

ruff = "isort --dont-follow-links && ruff check"
pylint = "pylint --ignore-patterns='_[a-z][a-z0-9_-]+.py' ./src ./tests"
pyright = "pyright --stats"
refurb = "refurb ./src ./tests"
bandit = "bandit --verbose --recursive ./src"
mypy = "mypy --install-types --non-interactive ./src ./tests"
outdated = "pip list --outdated"
lint = "for c in ruff pyright pylint refurb mypy; do uv run ${c}; done"

doctest = "python -m doctest -v ./src/*/[a-z]*.py"
pytest = "pytest --verbose --cov=. --cov-branch --cov-report=term-missing --cov-report=xml:.coverage.xml -p no:randomly ./tests"
coverage_report = "coverage report --show-missing"
coverage_annotate = "coverage annotate"
test = "for c in doctest pytest; do uv run ${c}; done"

pydoc_text = "python -m pydoc pysay | tee pysay.txt"
pydoc_html = "python -m pydoc -w pysay"
pdoc_html = "pdoc --html --force ."
mkdocs = "mkdocs new mkdocs && cd mkdocs && echo theme: readthedocs >> mkdocs.yml && yq --yaml-output . mkdocs.yml | sponge mkdocs.yml && mkdocs build"
doc = "for c in pydoc_text pydoc_html pdoc_html mkdocs; do uv run ${c}; done"

full = "for c in clean format lint test doc; do uv run ${c}; done"
