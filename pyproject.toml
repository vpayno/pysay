[project]
name = "pysay"
description = "Like cowsay but with a python (from Real Python tutorial)"
authors = [{ name = "Victor Payno", email = "vpayno@users.noreply.github.com" }]
maintainers = [
  { name = "Victor Payno", email = "vpayno@users.noreply.github.com" },
]
dynamic = ["version"]
requires-python = ">=3.12"
readme = "README.md"
license = "MIT"
license-files = ["LICENSE"]
keywords = ["pysay", "cli", "terminal"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
]
dependencies = ["rich>=13.7.0"]

[dependency-groups]
dev = [
  "bandit>=1.8.3",
  "isort>=6.0.0",
  "mkdocs>=1.6.1",
  "mypy-extensions>=1.0.0",
  "mypy>=1.15.0",
  "pdoc3>=0.11.5",
  "pylint>=3.3.4",
  "pyright>=1.1.394",
  "pytest-cov>=6.0.0",
  "pytest-datafiles>=3.0.0",
  "pytest-randomly>=3.16.0",
  "pytest>=8.3.4",
  "ruff>=0.9.6",
  "poethepoet>=0.32.2",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"
fallback-version = "v0.5.7"

[tool.hatch.version.vcs]
tag-pattern = "v[0-9]*"

[tool.hatch.build.hooks.vcs]
version-file = "src/pysay/__version__.py"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"
git_describe_command = [
  "git",
  "describe",
  "--dirty",
  "--tags",
  "--long",
  "--first-parent",
]
#version_scheme = "post-release"
fallback_version = "v0.5.7"

[tool.hatch.metadata]
allow-direct-references = true

[project.urls]
"Homepage" = "https://github.com/vpayno/pysay"
"Bug Tracker" = "https://github.com/vpayno/pysay/issues"
"Repository" = "https://github.com/vpayno/pysay.git"
"Changelog" = "https://github.com/vpayno/pysay/releases"
"Documentation" = "https://github.com/vpayno/pysay/blob/main/README.md"

[project.scripts]
pysay = "pysay.main:main"

[tool.uv]
package = true
preview = false

[tool.coverage.run]
branch = true
parallel = true
omit = [
  "src/pysay/__version__.py"
]

[tool.pyright]
include = ["src", "tests"]

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
# select = []
# ignore = []
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.mypy]
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
warn_return_any = true

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
skip = [".gitignore", ".dockerignore"]
src_paths = ["src", "tests"]
atomic = true
ensure_newline_before_comments = true
multi_line_output = 3
wrap_length = 10
line_length = 11

# task keys: {'shell', 'script', 'cmd', 'ref', 'sequence', 'switch', 'expr'}
[tool.poe.tasks.main]
cmd = "python -m pysay"
help = "Run main module"

[tool.poe.tasks.clean_docs]
shell = "rm -rf html mkdocs pysay.html pysay.md pysay.txt"
help = "Clean up generated docs"

[tool.poe.tasks.clean_pycache]
shell = "find ./src ./tests -type f -name '*.py[co]' -delete -print -o -type d -name __pycache__ -delete -print"
help = "Clean up pycache"

[tool.poe.tasks.clean_build]
shell = "rm -rf dist"
help = " Clean up builds"

[tool.poe.tasks.ruff]
shell = "ruff check"
help = "Run ruff linter"

[tool.poe.tasks.pylint]
shell = "pylint --ignore-patterns='_[a-z][a-z0-9_-]+.py' ./src ./tests"
help = "Run pylint"

[tool.poe.tasks.pyright]
cmd = "pyright --stats"
help = "Run pyright linter"

[tool.poe.tasks.refurb]
cmd = "refurb ./src ./tests"
help = "Run refurb linter"

[tool.poe.tasks.bandit]
cmd = "bandit --verbose --recursive ./src"
help = "Run bandit security linter"

[tool.poe.tasks.mypy]
cmd = "mypy --install-types --non-interactive ./src ./tests"
help = "Run mypy type annotation linter"

[tool.poe.tasks.outdated]
cmd = "pip list --outdated"
help = "Show outdated dependencies"

[tool.poe.tasks.doctest]
shell = "python -m doctest -v ./src/*/[a-z]*.py"
help = "Run doctests"

[tool.poe.tasks.pytest]
cmd = "pytest --verbose --cov=. --cov-branch --cov-report=term-missing --cov-report=xml:.coverage.xml -p no:randomly ./tests"
help = "Run pytests"

[tool.poe.tasks.coverage_report]
cmd = "coverage report --show-missing"
help = "Generate test coverage report"

[tool.poe.tasks.coverage_annotate]
cmd = "coverage annotate"
help = "Generate test coverage annotations"

[tool.poe.tasks.pydoc_text]
shell = "python -m pydoc pysay | tee pysay.txt"
help = "Build pydoc_text documentation"

[tool.poe.tasks.pydoc_html]
shell = "python -m pydoc -w pysay"
help = "Build pydoc_html documentation"

[tool.poe.tasks.pdoc_html]
shell = "pdoc --html --force ."
help = "Build pdoc_html documentation"

[tool.poe.tasks.mkdocs]
shell = """
mkdocs new mkdocs || exit
cd mkdocs || exit
echo theme: readthedocs >> mkdocs.yml || exit
yq --output-format yaml . mkdocs.yml | sponge mkdocs.yml || exit
mkdocs build
"""
help = "Use mkdocs to build docs"

[tool.poe.tasks.format]
shell = """
isort --dont-follow-links ./src ./tests
ruff format ./src ./tests
"""
help = "Run isort and ruff format on project"

[tool.poe.tasks.info]
shell = """
uv version
which uv
printf '\n'
python --version
which python
"""
help = "Show tool info"

[tool.poe.tasks.clean]
shell = """
for c in clean_docs clean_pycache clean_build; do
    uv run poe ${c} || exit
    printf '\n'
done
"""
help = "Clean project directory"

[tool.poe.tasks.lint]
shell = """
for c in ruff pyright pylint refurb mypy; do
    uv run poe ${c} || exit
    printf '\n'
done
"""
help = "Run all project lint tools"

[tool.poe.tasks.test]
shell = """
for c in doctest pytest; do
    uv run poe ${c} || exit
    printf '\n'
done
"""
help = "Run all project tests"

[tool.poe.tasks.doc]
shell = """
for c in pydoc_text pydoc_html pdoc_html makedocs; do
    uv run poe ${c} || exit
    printf '\n'
done
"""
help = "Build project documentation"

[tool.poe.tasks.full]
shell = """
for c in clean format lint test doc; do
    uv run poe ${c} || exit
    printf '\n'
done
"""
help = "Run all project tools"
